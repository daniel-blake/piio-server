# Example configuration file for PiIo
#
# Configuration is done in groups called I/O groups.
# Each IO group can only contain I/O's of one type, e.g. only Raspberry Pi GPIOs or only pins on one MCP23017 IO expander
# for each type there are parameters
# Each group has a unique name

# Note that in this example config file, all actual code is initially commented out to avoid problems directly after install

/*
# Io Group called GPIO
GPIO:
{
    # it is of I/O type "GPIO", indicating it uses Raspberry Pi internal GPIOS
    type = "GPIO";
    
    # Settings for this groups PWM generatoer
    pwm-tickdelay-us = 1600;    # Number of microseconds between ticks
    pwm-ticks = 16;             # Number of ticks in a pwm cycle
    
    # Settings for the individual I/O's 
    # Here too, each I/O has it's own type and it's own id.
    
    io:
    {
        # Input called 'intest'
        intest:
        {
            # It is of type "MULTIBITIN", which means that it takes values from multiple
            # bits and combines it into a single number value.
            # (To use a multibit output, you can use the type "MULTIBITOUT", which takes the same configuration, minus the additional settings)
            type: "MULTIBITIN";
            
            # The 'pins' options specified the pins that are used for the multibit input.
            # For the GPIO, it takes the BCM identifiers. Both revision 1 and 2 are supported, and converted to the proper pin automatically
            # Bit order is important, MSB first, LSB last.
            pins: [17, 18];
            
            # Additional config options are:
            
            // pullup: True/False        # Default: False - Enable/disable internal pullup (currently not functional on GPIO type)
            // invert: True/False        # Default: False - Invert the input pins before processing
            // int-enabled: True/False   # Default: True - Trigger an event on value change for this input
        }
        
        # Button called 'btn'
        btn:
        {
            # Input of type "BUTTON", which means a single input pin, treated as a button.
            # Buttons can trigger only 'Pressed' and 'Held' events, which trigger when the button is either pressed
            # for a minimum of (default) 25 ms, or held for a minimum of (default) 6000 ms
            # These values can be configured in the IO Group config
            type: "BUTTON";
            
            # Button is connected on pin 4.
            pin: 4;
            
            # Additional config options are:
            
            // pullup: True/False        # Default: True - Enable/disable internal pullup (currently not functional on GPIO type)
            // invert: True/False        # Default: True - Invert the input pins before processing
            // int-enabled: True/False   # Default: True - Trigger an event on value change for this input  
            
            # Note that defaults for buttons are different from defaults for other inputs (invert and pullup true by default for buttons)
            
        }
        
        # Output called 'led1'
        led1: 
        {
            # Output of type "OUTPUTPIN", which means a single output pin.
            type: "OUTPUTPIN";
            
            # Output on pin 23
            pin: 23;
        };
        # Output called 'led1'
        led2:
        {
            # Output of type "OUTPUTPIN", which means a single output pin.
            type: "OUTPUTPIN";
            # Output on pin 24
            pin: 24;
        };
        # PWM Output called 'led3'
        led3: 
        {
            # Output of type "PWMPIN", which means pwm on a single output pin.
            # Note that using PWM takes up processor time,
            # currently around 5% for mcp23017 pins, and up to 30% for GPIO pins. (This last value is being worked on)
            type: "PWMPIN";

            # Output on pin 23
            pin: 25;
        };
    };
}
*/

/*
# Example configuration 
# Io Group for MCP23017 driver
MCP:
{
    # it is of I/O type "MCP23017", indicating it uses an MCP23017 I2C I/O expander chip
    type = "MCP23017";
    
    # The MCP23017 needs an I2C address, and optionally a GPIO I/O pin to receive interrupts on
    address = 0x20;
    intpin = 22;

    # Settings for the individual I/O's 
    # Here too, each I/O has it's own type and it's own id.
    
    # Note that the pin id's for an MCP23017 are counted from the GPA0 as pin 0 up to GPB7 as pin 15
    io:
    {
        # Input called 'sensor1'
        sensor1:
        {
            # It is of type "INPUTPIN", which means that it takes the value from the single input pin
            type: "INPUTPIN";
            
            # Input on pin 7
            pin: 7;
        }
        leda:
        {
            # Output of type "PWMPIN", which means pwm on a single output pin.
            # Note that using PWM takes up processor time, around 5% on an RPI 1, depending on the pwm ticks
            type: "PWMPIN";
            
            # Output on pin 8
            pin: 8;
        }
        ledb:
        {
            # Output of type "PWMPIN", which means pwm on a single output pin.
            # Note that using PWM takes up processor time, around 5% on an RPI 1, depending on the pwm ticks
            type: "PWMPIN";
            
            # Output on pin 9
            pin: 9;
        }        
    }
}
*/

/*
# Example configuration 
# Io group for PCA9685 PWM driver
PWM:
{
    # it is of I/O type "PCM9685", indicating it addresses a PCM9685 PWM driver chip
    type = "PCM9685";
    
    # The PCM9685 needs an I2C address
    address = 0x40;

    # (optional) Frequency of the pwm signal in Hz (default: 100 Hz)
    frequency = 50;

    # PCM9685 specific configuration settings:
    osc-frequency = 25000000;   # (optional) Frequency of the oscillator in Hz (default: 25000000)
    external-clock = false;     # (optional) Enable external clock (default: false)
    ouput-invert = false;       # (optional) invert outputs (default: false)

    output-type = "totempole"   # (optional) Output type ("opendrain" or "totempole") (default: "totempole")
    ouput-on-disabled: "low"    # (optional) Status of outputs when /OE pin on chip == false ("high", "float" or "low") (default: "low")

    # Settings for the individual outputs 
    # Here too, each output has it's own type and it's own id.
    
    # The pin id's for a PCM9685 are counted from pin 0 up to pin 15
    io:
    {
        # PWM called 'servo1'
        servo1:
        {
            pin: 4;             # Output pin to use
            filter: "SERVO";    # (optional) Filter to use for ("NONE", "LED" or "SERVO")
            # the SERVO filter converts the provided values to pulse widths between a minimum and maximum values (see below)

            # Filter parameters for the "SERVO" filter
            servo-min-ms: 1;    # (optional) Width of the servo pulse at the lowest input value (in ms) (default: 1)
            servo-max-ms: 2;    # (optional) Width of the servo pulse at the highest input value (in ms) (default: 2)
            
            # Value mapping
            min: -90;           # (optional) Lowest possible value: when set to this value , the output will be always. (default: 0)   
            max: 90;            # (optional) Highest possible value: when set to this value , the output will be always on. (default: 1)
            default: 0;         # (optional) Initial value (default: 0)
            offset: 0;          # (optional) Offset fraction for the pwm pulse (0..1) (Not supported by all PWM backends)    
            
        }
        # PWM called 'r'
        r:
        {
            pin: 0;             # Output pin to use
            filter: "LED";      # (optional) Filter to use for ("NONE", "LED" or "SERVO")
            # the LED filter applies a gamma correction to the output (see gamma value below)

            # Filter parameters for the "LED" filter
            gamma: 2.8;         # (optional) Gamma correction value for the LED filter (default: 2.8)
            
            # Value mapping
            min: 0;             # (optional) Lowest possible value: when set to this value , the output will be always. (default: 0)   
            max: 1;             # (optional) Highest possible value: when set to this value , the output will be always on. (default: 1)
            default: 0;         # (optional) Initial value (default: 0)
            offset: 0;          # (optional) Offset fraction for the pwm pulse (0..1) (Not supported by all PWM backends)   
        }
        # PWM called 'g'
        g:
        {
            pin: 1;             # Output pin to use
            filter: "LED";      # (optional) Filter to use for ("NONE", "LED" or "SERVO")
            # the LED filter applies a gamma correction to the output (see gamma value below)

            # Filter parameters for the "LED" filter
            gamma: 2.8;         # (optional) Gamma correction value for the LED filter (default: 2.8)
            
            # Value mapping
            min: 0;             # (optional) Lowest possible value: when set to this value , the output will be always. (default: 0)   
            max: 1;             # (optional) Highest possible value: when set to this value , the output will be always on. (default: 1)
            default: 0;         # (optional) Initial value (default: 0)
            offset: 0;          # (optional) Offset fraction for the pwm pulse (0..1) (Not supported by all PWM backends)   
        }
        # PWM called 'b'
        b:
        {
            pin: 2;             # Output pin to use
            filter: "LED";      # (optional) Filter to use for ("NONE", "LED" or "SERVO")
            # the LED filter applies a gamma correction to the output (see gamma value below)

            # Filter parameters for the "LED" filter
            gamma: 2.8;         # (optional) Gamma correction value for the LED filter (default: 2.8)
            
            # Value mapping
            min: 0;             # (optional) Lowest possible value: when set to this value , the output will be always. (default: 0)   
            max: 1;             # (optional) Highest possible value: when set to this value , the output will be always on. (default: 1)
            default: 0;         # (optional) Initial value (default: 0)
            offset: 0;          # (optional) Offset fraction for the pwm pulse (0..1) (Not supported by all PWM backends)   
        }
        signal:
        {
            pin: 3;             # Output pin to use
            filter: "NONE";     # (optional) Filter to use for ("NONE", "LED" or "SERVO")
            # use NONE (or leave the filter parameter out) to have unfiltered output

            # Value mapping
            min: 0;             # (optional) Lowest possible value: when set to this value , the output will be always. (default: 0)   
            max: 1;             # (optional) Highest possible value: when set to this value , the output will be always on. (default: 1)
            default: 0;         # (optional) Initial value (default: 0)
            offset: 0;          # (optional) Offset fraction for the pwm pulse (0..1) (Not supported by all PWM backends)   
        }
        
    }
}
*/