#ifndef __IOGROUP_HWPWM_HPP
#define __IOGROUP_HWPWM_HPP

#include "pi-io-server-glue.hpp"
#include "iogroup-base.hpp"
#include "buttontimer/buttontimer.hpp"
#include "exception/baseexceptions.hpp"
#include <map>
#include <set>
#include <vector>
#include <stdint.h>

class IoGroupHwPwm : public IoGroupBase,
    //public DBus::IntrospectableAdaptor,
    //public DBus::ObjectAdaptor,
    public nl::miqra::PiIo::IoGroup::Pwm_adaptor // << This will be generated by the makefile using dbusxx-xml2cpp on pi-io-introspect.xml
{

protected:
	class PwmPin
	{
	public:
		enum PwmFilter { PwmFilterNone, PwmFilterLed, PwmFilterServo};

	public:
		PwmPin(std::string handle, IoGroupHwPwm *iogroup, libconfig::Setting &setting);
		double GetFilteredValue();
		void SetFromFilteredValue(const double &filteredValue, const double &offset);

		uint16_t GetId();
		void SetId(const uint16_t &id);
		const std::string GetHandle();
		PwmFilter GetFilter();
		double GetGamma();
		double GetValue();
		double GetOffset();
		void SetValue(const double &value);
	    double GetMin();
	    double GetMax();

	protected:
		PwmFilter filter;
		uint16_t id;
		std::string handle;
		double minValue;
		double maxValue ;
		double gamma ; // only relevant to type = led;
		double value ;
		double servoMinTimeMs;
		double servoMaxTimeMs;
		double offset;

		bool valueInverse;
		bool servoInverse;
		IoGroupHwPwm * iogroup;

		double ForwardGamma(const double &value);
		double ReverseGamma(const double &value);



	};
public:

    virtual std::string Interface(){ return "nl.miqra.PiIo.IoGroup.Pwm"; }

    IoGroupHwPwm(DBus::Connection &connection,std::string &dbuspath, GpioRegistry &registry);
    virtual ~IoGroupHwPwm();

    virtual void Initialize(libconfig::Setting &setting);

    virtual std::vector< std::string > Pwms();
    virtual void SetValue(const std::string& handle, const double& value);
    virtual double GetValue(const std::string& handle);
    virtual double GetMin(const std::string& handle);
    virtual double GetMax(const std::string& handle);
protected:
    // Override in child to get or set the actual PWM value
    // Throws FeatureNotImplementedException unless overridden in subclass
    virtual void setPwmPin(PwmPin *pin);

    // Throws FeatureNotImplementedException unless overridden in subclass
    virtual void getPwmPin(PwmPin *pin);

    // Throws FeatureNotImplementedException unless overridden in subclass
	virtual void preparePwmPin(PwmPin *pin);

    // Called at the start of the configuration round to allow for subclass
    // specific settings to be set in the config
    virtual void beginConfig(libconfig::Setting &setting);
	
    // called when registering pins.
	virtual uint16_t getPinId(const std::string &s);
	virtual uint16_t getPinId(const int32_t &i);


    // Called at the end of the configuration round to allow the subclass to 
    // finalize configuration
    virtual void endConfig(void);


public:
    double GetPwmPeriodMs();
    uint32_t GetPwmFrequency();

protected:
    uint32_t SetPwmFrequency(uint32_t frequency);
    std::set<PwmPin*> GetPwmPins();

private:
    uint32_t pwmFrequency;
    double pwmPeriodMs;
    // Maps for the different ID Types
    std::map<uint16_t, PwmPin*> idMap;
    std::map<std::string, PwmPin*> handleMap;
    std::set<std::string> pwmList;
    std::set<uint16_t> pwmIdList;
    std::set<PwmPin*> pwmPins;

    // Registration functions
    
    uint16_t getPinId(libconfig::Setting &io);
    
    bool registerPwmPin(PwmPin * pin);



};

#endif//__IOGROUP_HWPWM_HPP
