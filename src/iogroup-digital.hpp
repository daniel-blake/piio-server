#ifndef __IOGROUP_DIGITAL_HPP
#define __IOGROUP_DIGITAL_HPP

#include "pi-io-server-glue.hpp"
#include "iogroup-base.hpp"
#include "buttontimer/buttontimer.hpp"
#include <stdint.h>
#include <map>
#include <set>
#include <vector>

class IoGroupDigital : public IoGroupBase,
    //public DBus::IntrospectableAdaptor,
    //public DBus::ObjectAdaptor,
    public nl::miqra::PiIo::IoGroup::Digital_adaptor // << This will be generated by the makefile using dbusxx-xml2cpp on pi-io-introspect.xml
{
public:

    virtual std::string Interface(){ return "nl.miqra.PiIo.IoGroup.Digital"; }

    IoGroupDigital(DBus::Connection &connection,std::string &dbuspath, GpioRegistry &registry);
    virtual ~IoGroupDigital();

    virtual void Initialize(libconfig::Setting &setting);

    virtual std::vector< std::string > Buttons();
    virtual bool GetButton(const std::string& handle);

    virtual std::vector< std::string > Inputs();
    virtual bool GetInput(const std::string& handle);

    virtual std::vector< std::string > Outputs();
    virtual void SetOutput(const std::string& handle, const bool& value);
    virtual bool GetOutput(const std::string& handle);

    virtual std::vector< std::string > MbInputs();
    virtual uint32_t GetMbInput(const std::string& handle);

    virtual std::vector< std::string > MbOutputs();
    virtual void SetMbOutput(const std::string& handle, const uint32_t& value);
    virtual uint32_t GetMbOutput(const std::string& handle);

    virtual std::vector< std::string > Pwms();
    virtual void SetPwm(const std::string& handle, const uint8_t& value);
    virtual void SetLedPwm(const std::string& handle, const uint8_t& value);
    virtual uint8_t GetPwm(const std::string& handle);


    boost::signals2::signal<void (IoGroupDigital*, std::string)> onButtonHold;
    boost::signals2::signal<void (IoGroupDigital*, std::string)> onButtonPress;
    
    boost::signals2::signal<void (IoGroupDigital*, std::string, bool)> onInputChanged;
    boost::signals2::signal<void (IoGroupDigital*, std::string, bool)> onOutputChanged;

    boost::signals2::signal<void (IoGroupDigital*, std::string, uint32_t)> onMbInputChanged;
    boost::signals2::signal<void (IoGroupDigital*, std::string, uint32_t)> onMbOutputChanged;

    boost::signals2::signal<void (IoGroupDigital*, std::string, uint8_t)> onPwmValueChanged;

    // Button timer callback functions
    bool onValidatePress(uint16_t id);
    void onShortPress(uint16_t id);
    void onLongPress(uint16_t id);

protected:
    // Override in child to get input value by id
    virtual bool getInputPin(uint16_t id) = 0;
    // Override in child to actually set the output by id
    virtual bool setOutputPin(uint16_t id, bool value) = 0;
    // Override in child to actually set the PWM value
    // Throws FeatureNotImplementedException unless overridden in subclass
    virtual bool setPwm(uint16_t id, uint8_t value) = 0;
    // Call this function when an input value has changed
    void inputChanged(uint16_t id, bool value);

    // Called at the start of the configuration round to allow for subclass
    // specific settings to be set in the config
    virtual void beginConfig(libconfig::Setting &setting);
	
    // called when registering pins.
	virtual uint16_t getPinId(std::string s);
	virtual uint16_t getPinId(int32_t i);
    virtual void prepareInputPin(uint16_t pinid, bool invert, bool pullup, bool pulldown, bool inten) = 0;
    virtual void prepareOutputPin(uint16_t pinid) = 0;
    virtual void preparePwmPin(uint16_t pinid) = 0;

    // Called at the end of the configuration round to allow the subclass to 
    // finalize configuration
    virtual void endConfig(void);


private:
    ButtonTimer *btnTimer; 

    // Maps for the different ID Types
    std::map<uint16_t, std::string> handleMap;

    std::map<std::string,uint16_t> idMap;
    std::set<std::string> inputList;
    std::set<std::string> buttonList;
    std::set<uint16_t> buttonIdList;
    std::set<std::string> outputList;
    std::set<std::string> pwmList;
    std::set<uint16_t> pwmIdList;
    std::map<std::string,bool> outputValueMap;
    std::map<std::string,uint8_t> pwmValueMap;

    std::map< std::string,std::vector< uint16_t > > mbIdMap;
    std::set<std::string> mbInputList;
    std::set<uint16_t> mbInputIdList;
    std::set<std::string> mbOutputList;
    std::map<std::string,uint32_t> mbOutputValueMap;

    // Registration functions
    
    uint16_t getPinId(libconfig::Setting &io);
    std::vector<uint16_t> getMbPinIds(libconfig::Setting &pins);
    
    // Functions here are to register certain handles for certain uses.
    void registerButton(std::string handle, libconfig::Setting &setting);
    void registerInput(std::string handle, libconfig::Setting &setting);
    void registerOutput(std::string handle, libconfig::Setting &setting);
    void registerPwm(std::string handle, libconfig::Setting &setting);
	void registerMultiBitInput(std::string handle, libconfig::Setting &setting);
	void registerMultiBitOutput(std::string handle, libconfig::Setting &setting);

    bool registerHandle(std::string handle, uint16_t id);
    bool registerMbHandle(std::string handle, std::vector<uint16_t> ids); 
    // Button timer connections
    boost::signals2::connection onShortPressConnection;
    boost::signals2::connection onLongPressConnection;
    boost::signals2::connection onValidatePressConnection;

};

#endif//__IOGROUP_DIGITAL_HPP
